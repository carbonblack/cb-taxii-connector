versions pytest-5.3.0, py-1.8.0, python-3.8.5.final.0
cwd=/home/zestep/dev/cbr/threatconnect-connector
args=('test', '--debug')

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x7f3e54806370>
    pytest_plugin_registered [hook]
        plugin: <Session threatconnect-connector exitstatus='<UNSET>' testsfailed=0 testscollected=0>
        manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x7f3e54806370>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f3e50c289a0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f3e50c28b50>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x7f3e50c289d0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x7f3e54806370>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.resultlog' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/resultlog.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/pytest_cov/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_forked' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/pytest_forked/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'xdist.plugin' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/xdist/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'xdist.looponfail' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/xdist/looponfail.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'teamcity.pytest_plugin' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/teamcity/pytest_plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended'> err=<FDCapture 2 oldfd=6 _state='suspended'> in_=<FDCapture 0 oldfd=3 _state='started'> _state='suspended' _in_suspended='<UNSET>'> _current_item=None>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session threatconnect-connector exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f3e50c289a0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f3e50c28b50>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x7f3e50c289d0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7f3e50c28e20>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x7f3e50bdf220>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session threatconnect-connector exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x7f3e54806370>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.resultlog' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/resultlog.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/pytest_cov/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_forked' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/pytest_forked/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'xdist.plugin' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/xdist/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'xdist.looponfail' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/xdist/looponfail.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'teamcity.pytest_plugin' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/teamcity/pytest_plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended'> err=<FDCapture 2 oldfd=6 _state='suspended'> in_=<FDCapture 0 oldfd=3 _state='started'> _state='suspended' _in_suspended='<UNSET>'> _current_item=None>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session threatconnect-connector exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f3e50c289a0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f3e50c28b50>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x7f3e50c289d0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7f3e50c28e20>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x7f3e50bdf220>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x7f3e50bdf460>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3e57994a60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x7f3e54806370>
          startdir: /home/zestep/dev/cbr/threatconnect-connector
      early skip of rewriting module: email.parser [assertion]
      early skip of rewriting module: email.feedparser [assertion]
      early skip of rewriting module: email.errors [assertion]
      early skip of rewriting module: email._policybase [assertion]
      early skip of rewriting module: email.header [assertion]
      early skip of rewriting module: email.quoprimime [assertion]
      early skip of rewriting module: email.base64mime [assertion]
      early skip of rewriting module: email.charset [assertion]
      early skip of rewriting module: email.encoders [assertion]
      early skip of rewriting module: quopri [assertion]
      early skip of rewriting module: email.utils [assertion]
      early skip of rewriting module: email._parseaddr [assertion]
      early skip of rewriting module: calendar [assertion]
      early skip of rewriting module: email.message [assertion]
      early skip of rewriting module: uu [assertion]
      early skip of rewriting module: email._encoded_words [assertion]
      early skip of rewriting module: email.iterators [assertion]
      finish pytest_report_header --> [['rootdir: /home/zestep/dev/cbr/threatconnect-connector', 'plugins: cov-2.8.1, forked-1.1.3, xdist-1.30.0, teamcity-messages-1.27'], ['using: pytest-5.3.0 pylib-1.8.0', 'setuptools registered plugins:', '  pytest-cov-2.8.1 at /home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/pytest_cov/plugin.py', '  pytest-forked-1.1.3 at /home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/pytest_forked/__init__.py', '  pytest-xdist-1.30.0 at /home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/xdist/plugin.py', '  pytest-xdist-1.30.0 at /home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/xdist/looponfail.py', '  teamcity-messages-1.27 at /home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/teamcity/pytest_plugin.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session threatconnect-connector exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session threatconnect-connector exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['test'] [collection]
        pytest_collectstart [hook]
            collector: <Session threatconnect-connector exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session threatconnect-connector exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument [local('/home/zestep/dev/cbr/threatconnect-connector/test')] [collection]
            pytest_ignore_collect [hook]
                path: /home/zestep/dev/cbr/threatconnect-connector/test/__init__.py
                config: <_pytest.config.Config object at 0x7f3e54806370>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/zestep/dev/cbr/threatconnect-connector/test/__init__.py
                parent: <Session threatconnect-connector exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/zestep/dev/cbr/threatconnect-connector/test/__init__.py
                  parent: <Session threatconnect-connector exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package /home/zestep/dev/cbr/threatconnect-connector/test> [hook]
            finish pytest_collect_file --> [<Package /home/zestep/dev/cbr/threatconnect-connector/test>] [hook]
            pytest_ignore_collect [hook]
                path: /home/zestep/dev/cbr/threatconnect-connector/test/test
                config: <_pytest.config.Config object at 0x7f3e54806370>
            finish pytest_ignore_collect --> False [hook]
          early skip of rewriting module: py._code [assertion]
          early skip of rewriting module: py._code.code [assertion]
          early skip of rewriting module: repr [assertion]
            pytest_collect_directory [hook]
                path: /home/zestep/dev/cbr/threatconnect-connector/test/test
                parent: <Session threatconnect-connector exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/zestep/dev/cbr/threatconnect-connector/test/__init__.py
                config: <_pytest.config.Config object at 0x7f3e54806370>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/zestep/dev/cbr/threatconnect-connector/test/__init__.py
                parent: <Session threatconnect-connector exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/zestep/dev/cbr/threatconnect-connector/test/__init__.py
                  parent: <Session threatconnect-connector exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package /home/zestep/dev/cbr/threatconnect-connector/test> [hook]
            finish pytest_collect_file --> [<Package /home/zestep/dev/cbr/threatconnect-connector/test>] [hook]
            pytest_ignore_collect [hook]
                path: /home/zestep/dev/cbr/threatconnect-connector/test/test/utils
                config: <_pytest.config.Config object at 0x7f3e54806370>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/zestep/dev/cbr/threatconnect-connector/test/test/utils
                parent: <Session threatconnect-connector exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/zestep/dev/cbr/threatconnect-connector/test/test/__init__.py
                config: <_pytest.config.Config object at 0x7f3e54806370>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/zestep/dev/cbr/threatconnect-connector/test/test/__init__.py
                parent: <Session threatconnect-connector exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/zestep/dev/cbr/threatconnect-connector/test/test/__init__.py
                  parent: <Session threatconnect-connector exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package /home/zestep/dev/cbr/threatconnect-connector/test/test> [hook]
            finish pytest_collect_file --> [<Package /home/zestep/dev/cbr/threatconnect-connector/test/test>] [hook]
            pytest_ignore_collect [hook]
                path: /home/zestep/dev/cbr/threatconnect-connector/test/test/utils/__init__.py
                config: <_pytest.config.Config object at 0x7f3e54806370>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/zestep/dev/cbr/threatconnect-connector/test/test/utils/__init__.py
                parent: <Session threatconnect-connector exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/zestep/dev/cbr/threatconnect-connector/test/test/utils/__init__.py
                  parent: <Session threatconnect-connector exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package /home/zestep/dev/cbr/threatconnect-connector/test/test/utils> [hook]
            finish pytest_collect_file --> [<Package /home/zestep/dev/cbr/threatconnect-connector/test/test/utils>] [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=3 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=3 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Package /home/zestep/dev/cbr/threatconnect-connector/test> [collection]
      pytest_collectstart [hook]
          collector: <Package /home/zestep/dev/cbr/threatconnect-connector/test>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package /home/zestep/dev/cbr/threatconnect-connector/test>
        pytest_ignore_collect [hook]
            path: /home/zestep/dev/cbr/threatconnect-connector/test/test
            config: <_pytest.config.Config object at 0x7f3e54806370>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_directory [hook]
            path: /home/zestep/dev/cbr/threatconnect-connector/test/test
            parent: <Package /home/zestep/dev/cbr/threatconnect-connector/test>
        finish pytest_collect_directory --> None [hook]
        pytest_ignore_collect [hook]
            path: /home/zestep/dev/cbr/threatconnect-connector/test/smoke_test_server.py
            config: <_pytest.config.Config object at 0x7f3e54806370>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_file [hook]
            path: /home/zestep/dev/cbr/threatconnect-connector/test/smoke_test_server.py
            parent: <Package /home/zestep/dev/cbr/threatconnect-connector/test>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/zestep/dev/cbr/threatconnect-connector/test/test_config.py
            config: <_pytest.config.Config object at 0x7f3e54806370>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_file [hook]
            path: /home/zestep/dev/cbr/threatconnect-connector/test/test_config.py
            parent: <Package /home/zestep/dev/cbr/threatconnect-connector/test>
          pytest_pycollect_makemodule [hook]
              path: /home/zestep/dev/cbr/threatconnect-connector/test/test_config.py
              parent: <Package /home/zestep/dev/cbr/threatconnect-connector/test>
          finish pytest_pycollect_makemodule --> <Module test_config.py> [hook]
        finish pytest_collect_file --> [<Module test_config.py>] [hook]
        pytest_ignore_collect [hook]
            path: /home/zestep/dev/cbr/threatconnect-connector/test/test_driver.py
            config: <_pytest.config.Config object at 0x7f3e54806370>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_file [hook]
            path: /home/zestep/dev/cbr/threatconnect-connector/test/test_driver.py
            parent: <Package /home/zestep/dev/cbr/threatconnect-connector/test>
          pytest_pycollect_makemodule [hook]
              path: /home/zestep/dev/cbr/threatconnect-connector/test/test_driver.py
              parent: <Package /home/zestep/dev/cbr/threatconnect-connector/test>
          finish pytest_pycollect_makemodule --> <Module test_driver.py> [hook]
        finish pytest_collect_file --> [<Module test_driver.py>] [hook]
        pytest_ignore_collect [hook]
            path: /home/zestep/dev/cbr/threatconnect-connector/test/test/utils
            config: <_pytest.config.Config object at 0x7f3e54806370>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_directory [hook]
            path: /home/zestep/dev/cbr/threatconnect-connector/test/test/utils
            parent: <Package /home/zestep/dev/cbr/threatconnect-connector/test>
        finish pytest_collect_directory --> None [hook]
        pytest_ignore_collect [hook]
            path: /home/zestep/dev/cbr/threatconnect-connector/test/test/__init__.py
            config: <_pytest.config.Config object at 0x7f3e54806370>
        finish pytest_ignore_collect --> False [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/__init__.py' lenresult=2 outcome='passed'> [hook]
    genitems <Module test_config.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_config.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_config.py>
      find_module called for: test [assertion]
      find_module called for: test.test_config [assertion]
      matched test file '/home/zestep/dev/cbr/threatconnect-connector/test/test_config.py' [assertion]
      found cached rewritten pyc for /home/zestep/dev/cbr/threatconnect-connector/test/test_config.py [assertion]
      early skip of rewriting module: cbopensource [assertion]
      early skip of rewriting module: cbopensource.connectors [assertion]
      early skip of rewriting module: cbopensource.connectors.taxii [assertion]
      early skip of rewriting module: cbopensource.connectors.taxii.config [assertion]
      early skip of rewriting module: cbopensource.constant [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __name__
            obj: test.test_config
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __package__
            obj: test
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3e53f4bd90>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __spec__
            obj: ModuleSpec(name='test.test_config', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3e53f4bd90>, origin='/home/zestep/dev/cbr/threatconnect-connector/test/test_config.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __file__
            obj: /home/zestep/dev/cbr/threatconnect-connector/test/test_config.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __cached__
            obj: /home/zestep/dev/cbr/threatconnect-connector/test/__pycache__/test_config.cpython-38.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2020 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: TestCase
            obj: <class 'unittest.case.TestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: Config
            obj: <class 'cbopensource.connectors.taxii.config.Config'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: TestConfig
            obj: <class 'test.test_config.TestConfig'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestConfig> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __new__
            obj: <built-in method __new__ of type object at 0x7f3e59161680>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config.py>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/test_config.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase TestConfig> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestConfig>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestConfig>
      finish pytest_make_collect_report --> <CollectReport 'test/test_config.py::TestConfig' lenresult=40 outcome='passed'> [hook]
    genitems <TestCaseFunction test_01a_core_get_boolean> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_01a_core_get_boolean>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_01b_core_get_boolean_required> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_01b_core_get_boolean_required>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_01c_core_get_boolean_default> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_01c_core_get_boolean_default>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_02a_core_get_int> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_02a_core_get_int>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_02b_core_get_int_required> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_02b_core_get_int_required>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_02c_core_get_int_default> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_02c_core_get_int_default>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_02d_core_get_int_verify_func_passed> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_02d_core_get_int_verify_func_passed>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_02e_core_get_int_verify_func_failed> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_02e_core_get_int_verify_func_failed>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_02f_core_get_int_bogus> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_02f_core_get_int_bogus>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_02g_core_get_int_bogus_float> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_02g_core_get_int_bogus_float>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_03a_core_get_string> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_03a_core_get_string>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_03b_core_get_string_required> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_03b_core_get_string_required>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_03c_core_get_string_default> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_03c_core_get_string_default>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_03d_core_get_string_valid> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_03d_core_get_string_valid>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_03d_core_get_string_valid_not_listed> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_03d_core_get_string_valid_not_listed>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_03e_core_get_string_valid_not_listed_with_unmatched_ok> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_03e_core_get_string_valid_not_listed_with_unmatched_ok>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_03f_core_get_string_to_upper> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_03f_core_get_string_to_upper>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_03g_core_get_string_to_lower> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_03g_core_get_string_to_lower>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_03h_core_get_string_to_lower_and_to_upper> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_03h_core_get_string_to_lower_and_to_upper>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_04a_config_minimal> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_04a_config_minimal>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_04b_config_empty> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_04b_config_empty>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_05_cache_folder> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_05_cache_folder>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_06_debug> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_06_debug>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_07_feed_retrieval_minutes_below_1> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_07_feed_retrieval_minutes_below_1>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_08_host_address> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_08_host_address>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_09_https_proxy> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_09_https_proxy>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_10_listener_address> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_10_listener_address>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_11a_listener_port_below_minimum> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_11a_listener_port_below_minimum>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_11b_listener_port_above_maximum> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_11b_listener_port_above_maximum>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_12a_log_file_size> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_12a_log_file_size>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_12b_log_file_size> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_12b_log_file_size>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_13a_log_level> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_13a_log_level>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_13b_log_level_unmatched> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_13b_log_level_unmatched>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_14_multi_core> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_14_multi_core>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_15_pretty_print_json> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_15_pretty_print_json>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_16_carbonblack_server_url> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_16_carbonblack_server_url>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_17a_skip_cb_sync> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_17a_skip_cb_sync>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_17b_skip_cb_sync_true_no_token> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_17b_skip_cb_sync_true_no_token>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_18a_feed_save_mode> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_18a_feed_save_mode>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_18b_save_mode_unmatched> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_18b_save_mode_unmatched>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/test_config.py::TestConfig' lenresult=40 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestCase>
      finish pytest_make_collect_report --> <CollectReport 'test/test_config.py::TestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/test_config.py::TestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/test_config.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_driver.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_driver.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_driver.py>
      find_module called for: test.test_driver [assertion]
      matched test file '/home/zestep/dev/cbr/threatconnect-connector/test/test_driver.py' [assertion]
      found cached rewritten pyc for /home/zestep/dev/cbr/threatconnect-connector/test/test_driver.py [assertion]
      early skip of rewriting module: cbopensource.driver [assertion]
      early skip of rewriting module: cbopensource.driver.taxii [assertion]
      early skip of rewriting module: stix2patterns [assertion]
      early skip of rewriting module: stix2patterns.pattern [assertion]
      early skip of rewriting module: stix2patterns.exceptions [assertion]
      early skip of rewriting module: antlr4 [assertion]
      early skip of rewriting module: antlr4.Token [assertion]
      early skip of rewriting module: antlr4.InputStream [assertion]
      early skip of rewriting module: antlr4.FileStream [assertion]
      early skip of rewriting module: antlr4.StdinStream [assertion]
      early skip of rewriting module: antlr4.BufferedTokenStream [assertion]
      early skip of rewriting module: antlr4.error [assertion]
      early skip of rewriting module: antlr4.error.Errors [assertion]
      early skip of rewriting module: antlr4.ParserRuleContext [assertion]
      early skip of rewriting module: antlr4.RuleContext [assertion]
      early skip of rewriting module: antlr4.tree [assertion]
      early skip of rewriting module: antlr4.tree.Tree [assertion]
      early skip of rewriting module: antlr4.tree.Trees [assertion]
      early skip of rewriting module: antlr4.Utils [assertion]
      early skip of rewriting module: antlr4.Recognizer [assertion]
      early skip of rewriting module: antlr4.error.ErrorListener [assertion]
      early skip of rewriting module: antlr4.CommonTokenStream [assertion]
      early skip of rewriting module: antlr4.Lexer [assertion]
      early skip of rewriting module: antlr4.CommonTokenFactory [assertion]
      early skip of rewriting module: antlr4.atn [assertion]
      early skip of rewriting module: antlr4.atn.LexerATNSimulator [assertion]
      early skip of rewriting module: antlr4.PredictionContext [assertion]
      early skip of rewriting module: antlr4.atn.ATN [assertion]
      early skip of rewriting module: antlr4.IntervalSet [assertion]
      early skip of rewriting module: antlr4.atn.ATNType [assertion]
      early skip of rewriting module: antlr4.atn.ATNState [assertion]
      early skip of rewriting module: antlr4.atn.Transition [assertion]
      early skip of rewriting module: antlr4.atn.SemanticContext [assertion]
      early skip of rewriting module: antlr4.atn.ATNConfig [assertion]
      early skip of rewriting module: antlr4.atn.LexerActionExecutor [assertion]
      early skip of rewriting module: antlr4.atn.LexerAction [assertion]
      early skip of rewriting module: antlr4.atn.ATNSimulator [assertion]
      early skip of rewriting module: antlr4.atn.ATNConfigSet [assertion]
      early skip of rewriting module: antlr4.dfa [assertion]
      early skip of rewriting module: antlr4.dfa.DFAState [assertion]
      early skip of rewriting module: antlr4.Parser [assertion]
      early skip of rewriting module: antlr4.error.ErrorStrategy [assertion]
      early skip of rewriting module: antlr4.atn.ATNDeserializer [assertion]
      early skip of rewriting module: antlr4.atn.ATNDeserializationOptions [assertion]
      early skip of rewriting module: antlr4.tree.ParseTreePatternMatcher [assertion]
      early skip of rewriting module: antlr4.ListTokenSource [assertion]
      early skip of rewriting module: antlr4.tree.Chunk [assertion]
      early skip of rewriting module: antlr4.tree.RuleTagToken [assertion]
      early skip of rewriting module: antlr4.tree.TokenTagToken [assertion]
      early skip of rewriting module: antlr4.dfa.DFA [assertion]
      early skip of rewriting module: antlr4.atn.ParserATNSimulator [assertion]
      early skip of rewriting module: antlr4.atn.PredictionMode [assertion]
      early skip of rewriting module: antlr4.error.DiagnosticErrorListener [assertion]
      early skip of rewriting module: stix2patterns.v20 [assertion]
      early skip of rewriting module: stix2patterns.v20.pattern [assertion]
      early skip of rewriting module: six [assertion]
      early skip of rewriting module: stix2patterns.v20.grammars [assertion]
      early skip of rewriting module: stix2patterns.v20.grammars.STIXPatternLexer [assertion]
      early skip of rewriting module: stix2patterns.v20.grammars.STIXPatternParser [assertion]
      early skip of rewriting module: stix2patterns.v20.inspector [assertion]
      early skip of rewriting module: stix2patterns.inspector [assertion]
      early skip of rewriting module: stix2patterns.v20.grammars.STIXPatternListener [assertion]
      early skip of rewriting module: stix2patterns.v21 [assertion]
      early skip of rewriting module: stix2patterns.v21.grammars [assertion]
      early skip of rewriting module: stix2patterns.v21.grammars.STIXPatternListener [assertion]
      early skip of rewriting module: taxii2client [assertion]
      early skip of rewriting module: taxii2client.v21 [assertion]
      early skip of rewriting module: six.moves [assertion]
      early skip of rewriting module: six.moves.urllib [assertion]
      early skip of rewriting module: taxii2client.common [assertion]
      early skip of rewriting module: pytz [assertion]
      early skip of rewriting module: pytz.exceptions [assertion]
      early skip of rewriting module: pytz.lazy [assertion]
      early skip of rewriting module: pytz.tzinfo [assertion]
      early skip of rewriting module: pytz.tzfile [assertion]
      early skip of rewriting module: requests [assertion]
      early skip of rewriting module: urllib3 [assertion]
      early skip of rewriting module: urllib3.connectionpool [assertion]
      early skip of rewriting module: urllib3.exceptions [assertion]
      early skip of rewriting module: urllib3.packages [assertion]
      early skip of rewriting module: urllib3.packages.ssl_match_hostname [assertion]
      early skip of rewriting module: urllib3.packages.six [assertion]
      early skip of rewriting module: urllib3.packages.six.moves [assertion]
      early skip of rewriting module: urllib3.packages.six.moves.http_client [assertion]
      early skip of rewriting module: http [assertion]
      early skip of rewriting module: http.client [assertion]
      early skip of rewriting module: queue [assertion]
      early skip of rewriting module: _queue [assertion]
      early skip of rewriting module: urllib3.connection [assertion]
      early skip of rewriting module: urllib3.util [assertion]
      early skip of rewriting module: urllib3.util.connection [assertion]
      early skip of rewriting module: urllib3.util.wait [assertion]
      early skip of rewriting module: urllib3.contrib [assertion]
      early skip of rewriting module: urllib3.contrib._appengine_environ [assertion]
      early skip of rewriting module: urllib3.util.request [assertion]
      early skip of rewriting module: urllib3.util.response [assertion]
      early skip of rewriting module: urllib3.util.ssl_ [assertion]
      early skip of rewriting module: hmac [assertion]
      early skip of rewriting module: urllib3.util.timeout [assertion]
      early skip of rewriting module: urllib3.util.retry [assertion]
      early skip of rewriting module: urllib3.util.url [assertion]
      early skip of rewriting module: urllib3.packages.six.moves.urllib [assertion]
      early skip of rewriting module: urllib3.packages.six.moves.urllib.parse [assertion]
      early skip of rewriting module: urllib3._collections [assertion]
      early skip of rewriting module: urllib3.request [assertion]
      early skip of rewriting module: urllib3.filepost [assertion]
      early skip of rewriting module: urllib3.fields [assertion]
      early skip of rewriting module: mimetypes [assertion]
      early skip of rewriting module: winreg [assertion]
      early skip of rewriting module: urllib3.response [assertion]
      early skip of rewriting module: urllib3.util.queue [assertion]
      early skip of rewriting module: urllib3.poolmanager [assertion]
      early skip of rewriting module: chardet [assertion]
      early skip of rewriting module: chardet.compat [assertion]
      early skip of rewriting module: chardet.universaldetector [assertion]
      early skip of rewriting module: chardet.charsetgroupprober [assertion]
      early skip of rewriting module: chardet.enums [assertion]
      early skip of rewriting module: chardet.charsetprober [assertion]
      early skip of rewriting module: chardet.escprober [assertion]
      early skip of rewriting module: chardet.codingstatemachine [assertion]
      early skip of rewriting module: chardet.escsm [assertion]
      early skip of rewriting module: chardet.latin1prober [assertion]
      early skip of rewriting module: chardet.mbcsgroupprober [assertion]
      early skip of rewriting module: chardet.utf8prober [assertion]
      early skip of rewriting module: chardet.mbcssm [assertion]
      early skip of rewriting module: chardet.sjisprober [assertion]
      early skip of rewriting module: chardet.mbcharsetprober [assertion]
      early skip of rewriting module: chardet.chardistribution [assertion]
      early skip of rewriting module: chardet.euctwfreq [assertion]
      early skip of rewriting module: chardet.euckrfreq [assertion]
      early skip of rewriting module: chardet.gb2312freq [assertion]
      early skip of rewriting module: chardet.big5freq [assertion]
      early skip of rewriting module: chardet.jisfreq [assertion]
      early skip of rewriting module: chardet.jpcntx [assertion]
      early skip of rewriting module: chardet.eucjpprober [assertion]
      early skip of rewriting module: chardet.gb2312prober [assertion]
      early skip of rewriting module: chardet.euckrprober [assertion]
      early skip of rewriting module: chardet.cp949prober [assertion]
      early skip of rewriting module: chardet.big5prober [assertion]
      early skip of rewriting module: chardet.euctwprober [assertion]
      early skip of rewriting module: chardet.sbcsgroupprober [assertion]
      early skip of rewriting module: chardet.sbcharsetprober [assertion]
      early skip of rewriting module: chardet.langcyrillicmodel [assertion]
      early skip of rewriting module: chardet.langgreekmodel [assertion]
      early skip of rewriting module: chardet.langbulgarianmodel [assertion]
      early skip of rewriting module: chardet.langthaimodel [assertion]
      early skip of rewriting module: chardet.langhebrewmodel [assertion]
      early skip of rewriting module: chardet.hebrewprober [assertion]
      early skip of rewriting module: chardet.langturkishmodel [assertion]
      early skip of rewriting module: chardet.version [assertion]
      early skip of rewriting module: requests.exceptions [assertion]
      early skip of rewriting module: urllib3.contrib.pyopenssl [assertion]
      early skip of rewriting module: OpenSSL [assertion]
      early skip of rewriting module: requests.__version__ [assertion]
      early skip of rewriting module: requests.utils [assertion]
      early skip of rewriting module: requests.certs [assertion]
      early skip of rewriting module: certifi [assertion]
      early skip of rewriting module: certifi.core [assertion]
      early skip of rewriting module: requests._internal_utils [assertion]
      early skip of rewriting module: requests.compat [assertion]
      early skip of rewriting module: simplejson [assertion]
      early skip of rewriting module: simplejson.errors [assertion]
      early skip of rewriting module: simplejson.raw_json [assertion]
      early skip of rewriting module: simplejson.decoder [assertion]
      early skip of rewriting module: simplejson.compat [assertion]
      early skip of rewriting module: simplejson.scanner [assertion]
      early skip of rewriting module: simplejson._speedups [assertion]
      early skip of rewriting module: simplejson.encoder [assertion]
      early skip of rewriting module: urllib.request [assertion]
      early skip of rewriting module: urllib.error [assertion]
      early skip of rewriting module: urllib.response [assertion]
      early skip of rewriting module: http.cookiejar [assertion]
      early skip of rewriting module: http.cookies [assertion]
      early skip of rewriting module: requests.cookies [assertion]
      early skip of rewriting module: requests.structures [assertion]
      early skip of rewriting module: requests.packages [assertion]
      early skip of rewriting module: idna [assertion]
      early skip of rewriting module: idna.package_data [assertion]
      early skip of rewriting module: idna.core [assertion]
      early skip of rewriting module: idna.idnadata [assertion]
      early skip of rewriting module: idna.intranges [assertion]
      early skip of rewriting module: requests.models [assertion]
      early skip of rewriting module: encodings.idna [assertion]
      early skip of rewriting module: stringprep [assertion]
      early skip of rewriting module: requests.hooks [assertion]
      early skip of rewriting module: requests.auth [assertion]
      early skip of rewriting module: requests.status_codes [assertion]
      early skip of rewriting module: requests.api [assertion]
      early skip of rewriting module: requests.sessions [assertion]
      early skip of rewriting module: requests.adapters [assertion]
      early skip of rewriting module: urllib3.contrib.socks [assertion]
      early skip of rewriting module: socks [assertion]
      early skip of rewriting module: taxii2client.exceptions [assertion]
      early skip of rewriting module: taxii2client.version [assertion]
      find_module called for: test.test [assertion]
      early skip of rewriting module: test.test.utils [assertion]
      early skip of rewriting module: test.test.utils.taxii_mock_server [assertion]
      early skip of rewriting module: flask_script [assertion]
      early skip of rewriting module: flask [assertion]
      early skip of rewriting module: werkzeug [assertion]
      early skip of rewriting module: werkzeug.serving [assertion]
      early skip of rewriting module: werkzeug._compat [assertion]
      early skip of rewriting module: werkzeug._internal [assertion]
      early skip of rewriting module: werkzeug.exceptions [assertion]
      early skip of rewriting module: werkzeug.utils [assertion]
      early skip of rewriting module: pkgutil [assertion]
      early skip of rewriting module: html [assertion]
      early skip of rewriting module: html.entities [assertion]
      early skip of rewriting module: werkzeug.urls [assertion]
      early skip of rewriting module: socketserver [assertion]
      early skip of rewriting module: http.server [assertion]
      early skip of rewriting module: click [assertion]
      early skip of rewriting module: click.core [assertion]
      early skip of rewriting module: click._compat [assertion]
      early skip of rewriting module: click._unicodefun [assertion]
      early skip of rewriting module: click.exceptions [assertion]
      early skip of rewriting module: click.utils [assertion]
      early skip of rewriting module: click.globals [assertion]
      early skip of rewriting module: click.formatting [assertion]
      early skip of rewriting module: click.parser [assertion]
      early skip of rewriting module: click.termui [assertion]
      early skip of rewriting module: click.types [assertion]
      early skip of rewriting module: click.decorators [assertion]
      find_module called for: werkzeug.test [assertion]
      early skip of rewriting module: werkzeug.datastructures [assertion]
      early skip of rewriting module: werkzeug.filesystem [assertion]
      early skip of rewriting module: werkzeug.http [assertion]
      early skip of rewriting module: werkzeug.wrappers [assertion]
      early skip of rewriting module: werkzeug.wrappers.accept [assertion]
      early skip of rewriting module: werkzeug.wrappers.auth [assertion]
      early skip of rewriting module: werkzeug.wrappers.base_request [assertion]
      early skip of rewriting module: werkzeug.formparser [assertion]
      early skip of rewriting module: werkzeug.wsgi [assertion]
      early skip of rewriting module: werkzeug.wrappers.base_response [assertion]
      early skip of rewriting module: werkzeug.wrappers.common_descriptors [assertion]
      early skip of rewriting module: werkzeug.wrappers.etag [assertion]
      early skip of rewriting module: werkzeug.wrappers.request [assertion]
      early skip of rewriting module: werkzeug.wrappers.cors [assertion]
      early skip of rewriting module: werkzeug.wrappers.user_agent [assertion]
      early skip of rewriting module: werkzeug.useragents [assertion]
      early skip of rewriting module: werkzeug.wrappers.response [assertion]
      early skip of rewriting module: jinja2 [assertion]
      early skip of rewriting module: jinja2.environment [assertion]
      early skip of rewriting module: jinja2.nodes [assertion]
      early skip of rewriting module: jinja2.utils [assertion]
      early skip of rewriting module: jinja2._compat [assertion]
      early skip of rewriting module: markupsafe [assertion]
      early skip of rewriting module: markupsafe._compat [assertion]
      early skip of rewriting module: markupsafe._speedups [assertion]
      early skip of rewriting module: jinja2.defaults [assertion]
      early skip of rewriting module: jinja2.filters [assertion]
      early skip of rewriting module: jinja2.runtime [assertion]
      early skip of rewriting module: jinja2.exceptions [assertion]
      early skip of rewriting module: jinja2.tests [assertion]
      early skip of rewriting module: jinja2.lexer [assertion]
      early skip of rewriting module: jinja2._identifier [assertion]
      early skip of rewriting module: jinja2.parser [assertion]
      early skip of rewriting module: jinja2.compiler [assertion]
      early skip of rewriting module: jinja2.visitor [assertion]
      early skip of rewriting module: jinja2.optimizer [assertion]
      early skip of rewriting module: jinja2.idtracking [assertion]
      early skip of rewriting module: jinja2.loaders [assertion]
      early skip of rewriting module: jinja2.bccache [assertion]
      early skip of rewriting module: jinja2.asyncsupport [assertion]
      early skip of rewriting module: jinja2.asyncfilters [assertion]
      early skip of rewriting module: flask.app [assertion]
      early skip of rewriting module: werkzeug.routing [assertion]
      early skip of rewriting module: flask.helpers [assertion]
      early skip of rewriting module: flask.signals [assertion]
      early skip of rewriting module: blinker [assertion]
      early skip of rewriting module: flask.globals [assertion]
      early skip of rewriting module: werkzeug.local [assertion]
      early skip of rewriting module: greenlet [assertion]
      early skip of rewriting module: thread [assertion]
      early skip of rewriting module: flask._compat [assertion]
      early skip of rewriting module: flask.json [assertion]
      early skip of rewriting module: itsdangerous [assertion]
      early skip of rewriting module: itsdangerous._json [assertion]
      early skip of rewriting module: itsdangerous.encoding [assertion]
      early skip of rewriting module: itsdangerous._compat [assertion]
      early skip of rewriting module: itsdangerous.exc [assertion]
      early skip of rewriting module: itsdangerous.jws [assertion]
      early skip of rewriting module: itsdangerous.serializer [assertion]
      early skip of rewriting module: itsdangerous.signer [assertion]
      early skip of rewriting module: itsdangerous.timed [assertion]
      early skip of rewriting module: itsdangerous.url_safe [assertion]
      early skip of rewriting module: flask.cli [assertion]
      early skip of rewriting module: flask.wrappers [assertion]
      early skip of rewriting module: flask.config [assertion]
      early skip of rewriting module: flask.ctx [assertion]
      early skip of rewriting module: flask.sessions [assertion]
      early skip of rewriting module: flask.templating [assertion]
      early skip of rewriting module: flask.blueprints [assertion]
      early skip of rewriting module: flask_script._compat [assertion]
      early skip of rewriting module: flask_script.commands [assertion]
      early skip of rewriting module: flask_script.cli [assertion]
      early skip of rewriting module: getpass [assertion]
      early skip of rewriting module: termios [assertion]
      early skip of rewriting module: argcomplete [assertion]
      early skip of rewriting module: medallion [assertion]
      early skip of rewriting module: flask_httpauth [assertion]
      early skip of rewriting module: werkzeug.security [assertion]
      early skip of rewriting module: medallion.exceptions [assertion]
      early skip of rewriting module: medallion.version [assertion]
      early skip of rewriting module: medallion.views [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __name__
            obj: test.test_driver
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __package__
            obj: test
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3e53f4bd90>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __spec__
            obj: ModuleSpec(name='test.test_driver', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3e53f4bd90>, origin='/home/zestep/dev/cbr/threatconnect-connector/test/test_driver.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __file__
            obj: /home/zestep/dev/cbr/threatconnect-connector/test/test_driver.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __cached__
            obj: /home/zestep/dev/cbr/threatconnect-connector/test/__pycache__/test_driver.cpython-38.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2020 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/zestep/dev/cbr/threatconnect-connector/build/el7/python-venv/lib64/python3.8/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: threading
            obj: <module 'threading' from '/usr/lib64/python3.8/threading.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib64/python3.8/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: taxii
            obj: <module 'cbopensource.driver.taxii' from '/home/zestep/dev/cbr/threatconnect-connector/src/cbopensource/driver/taxii.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: start_mock_server
            obj: <function start_mock_server at 0x7f3e50137b80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: _TestDriverMockedServer
            obj: <class 'test.test_driver._TestDriverMockedServer'>
        finish pytest_pycollect_makeitem --> <UnitTestCase _TestDriverMockedServer> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __new__
            obj: <built-in method __new__ of type object at 0x7f3e59161680>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_driver.py>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/test_driver.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase _TestDriverMockedServer> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase _TestDriverMockedServer>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase _TestDriverMockedServer>
      finish pytest_make_collect_report --> <CollectReport 'test/test_driver.py::_TestDriverMockedServer' lenresult=4 outcome='passed'> [hook]
    genitems <TestCaseFunction test_get_collections> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_collections>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_indicators> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_indicators>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_reports> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_reports>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_verify_connection> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_verify_connection>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/test_driver.py::_TestDriverMockedServer' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/test_driver.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/__init__.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package /home/zestep/dev/cbr/threatconnect-connector/test/test> [collection]
      pytest_collectstart [hook]
          collector: <Package /home/zestep/dev/cbr/threatconnect-connector/test/test>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package /home/zestep/dev/cbr/threatconnect-connector/test/test>
        pytest_ignore_collect [hook]
            path: /home/zestep/dev/cbr/threatconnect-connector/test/test/utils
            config: <_pytest.config.Config object at 0x7f3e54806370>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_directory [hook]
            path: /home/zestep/dev/cbr/threatconnect-connector/test/test/utils
            parent: <Package /home/zestep/dev/cbr/threatconnect-connector/test/test>
        finish pytest_collect_directory --> None [hook]
        pytest_ignore_collect [hook]
            path: /home/zestep/dev/cbr/threatconnect-connector/test/test/utils/__init__.py
            config: <_pytest.config.Config object at 0x7f3e54806370>
        finish pytest_ignore_collect --> False [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/test/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/test/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package /home/zestep/dev/cbr/threatconnect-connector/test/test/utils> [collection]
      pytest_collectstart [hook]
          collector: <Package /home/zestep/dev/cbr/threatconnect-connector/test/test/utils>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package /home/zestep/dev/cbr/threatconnect-connector/test/test/utils>
        pytest_ignore_collect [hook]
            path: /home/zestep/dev/cbr/threatconnect-connector/test/test/utils/generate_taxii_data.py
            config: <_pytest.config.Config object at 0x7f3e54806370>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_file [hook]
            path: /home/zestep/dev/cbr/threatconnect-connector/test/test/utils/generate_taxii_data.py
            parent: <Package /home/zestep/dev/cbr/threatconnect-connector/test/test/utils>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/zestep/dev/cbr/threatconnect-connector/test/test/utils/mock_taxii_data.json
            config: <_pytest.config.Config object at 0x7f3e54806370>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_file [hook]
            path: /home/zestep/dev/cbr/threatconnect-connector/test/test/utils/mock_taxii_data.json
            parent: <Package /home/zestep/dev/cbr/threatconnect-connector/test/test/utils>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/zestep/dev/cbr/threatconnect-connector/test/test/utils/taxii_mock_server.py
            config: <_pytest.config.Config object at 0x7f3e54806370>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_file [hook]
            path: /home/zestep/dev/cbr/threatconnect-connector/test/test/utils/taxii_mock_server.py
            parent: <Package /home/zestep/dev/cbr/threatconnect-connector/test/test/utils>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/zestep/dev/cbr/threatconnect-connector/test/test/utils/taxii_server_config.json
            config: <_pytest.config.Config object at 0x7f3e54806370>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_file [hook]
            path: /home/zestep/dev/cbr/threatconnect-connector/test/test/utils/taxii_server_config.json
            parent: <Package /home/zestep/dev/cbr/threatconnect-connector/test/test/utils>
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/test/utils/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/test/utils/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session threatconnect-connector exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x7f3e54806370>
          items: [<TestCaseFunction test_01a_core_get_boolean>, <TestCaseFunction test_01b_core_get_boolean_required>, <TestCaseFunction test_01c_core_get_boolean_default>, <TestCaseFunction test_02a_core_get_int>, <TestCaseFunction test_02b_core_get_int_required>, <TestCaseFunction test_02c_core_get_int_default>, <TestCaseFunction test_02d_core_get_int_verify_func_passed>, <TestCaseFunction test_02e_core_get_int_verify_func_failed>, <TestCaseFunction test_02f_core_get_int_bogus>, <TestCaseFunction test_02g_core_get_int_bogus_float>, <TestCaseFunction test_03a_core_get_string>, <TestCaseFunction test_03b_core_get_string_required>, <TestCaseFunction test_03c_core_get_string_default>, <TestCaseFunction test_03d_core_get_string_valid>, <TestCaseFunction test_03d_core_get_string_valid_not_listed>, <TestCaseFunction test_03e_core_get_string_valid_not_listed_with_unmatched_ok>, <TestCaseFunction test_03f_core_get_string_to_upper>, <TestCaseFunction test_03g_core_get_string_to_lower>, <TestCaseFunction test_03h_core_get_string_to_lower_and_to_upper>, <TestCaseFunction test_04a_config_minimal>, <TestCaseFunction test_04b_config_empty>, <TestCaseFunction test_05_cache_folder>, <TestCaseFunction test_06_debug>, <TestCaseFunction test_07_feed_retrieval_minutes_below_1>, <TestCaseFunction test_08_host_address>, <TestCaseFunction test_09_https_proxy>, <TestCaseFunction test_10_listener_address>, <TestCaseFunction test_11a_listener_port_below_minimum>, <TestCaseFunction test_11b_listener_port_above_maximum>, <TestCaseFunction test_12a_log_file_size>, <TestCaseFunction test_12b_log_file_size>, <TestCaseFunction test_13a_log_level>, <TestCaseFunction test_13b_log_level_unmatched>, <TestCaseFunction test_14_multi_core>, <TestCaseFunction test_15_pretty_print_json>, <TestCaseFunction test_16_carbonblack_server_url>, <TestCaseFunction test_17a_skip_cb_sync>, <TestCaseFunction test_17b_skip_cb_sync_true_no_token>, <TestCaseFunction test_18a_feed_save_mode>, <TestCaseFunction test_18b_save_mode_unmatched>, <TestCaseFunction test_get_collections>, <TestCaseFunction test_get_indicators>, <TestCaseFunction test_get_reports>, <TestCaseFunction test_verify_connection>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session threatconnect-connector exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x7f3e54806370>
            startdir: /home/zestep/dev/cbr/threatconnect-connector
            items: [<TestCaseFunction test_01a_core_get_boolean>, <TestCaseFunction test_01b_core_get_boolean_required>, <TestCaseFunction test_01c_core_get_boolean_default>, <TestCaseFunction test_02a_core_get_int>, <TestCaseFunction test_02b_core_get_int_required>, <TestCaseFunction test_02c_core_get_int_default>, <TestCaseFunction test_02d_core_get_int_verify_func_passed>, <TestCaseFunction test_02e_core_get_int_verify_func_failed>, <TestCaseFunction test_02f_core_get_int_bogus>, <TestCaseFunction test_02g_core_get_int_bogus_float>, <TestCaseFunction test_03a_core_get_string>, <TestCaseFunction test_03b_core_get_string_required>, <TestCaseFunction test_03c_core_get_string_default>, <TestCaseFunction test_03d_core_get_string_valid>, <TestCaseFunction test_03d_core_get_string_valid_not_listed>, <TestCaseFunction test_03e_core_get_string_valid_not_listed_with_unmatched_ok>, <TestCaseFunction test_03f_core_get_string_to_upper>, <TestCaseFunction test_03g_core_get_string_to_lower>, <TestCaseFunction test_03h_core_get_string_to_lower_and_to_upper>, <TestCaseFunction test_04a_config_minimal>, <TestCaseFunction test_04b_config_empty>, <TestCaseFunction test_05_cache_folder>, <TestCaseFunction test_06_debug>, <TestCaseFunction test_07_feed_retrieval_minutes_below_1>, <TestCaseFunction test_08_host_address>, <TestCaseFunction test_09_https_proxy>, <TestCaseFunction test_10_listener_address>, <TestCaseFunction test_11a_listener_port_below_minimum>, <TestCaseFunction test_11b_listener_port_above_maximum>, <TestCaseFunction test_12a_log_file_size>, <TestCaseFunction test_12b_log_file_size>, <TestCaseFunction test_13a_log_level>, <TestCaseFunction test_13b_log_level_unmatched>, <TestCaseFunction test_14_multi_core>, <TestCaseFunction test_15_pretty_print_json>, <TestCaseFunction test_16_carbonblack_server_url>, <TestCaseFunction test_17a_skip_cb_sync>, <TestCaseFunction test_17b_skip_cb_sync_true_no_token>, <TestCaseFunction test_18a_feed_save_mode>, <TestCaseFunction test_18b_save_mode_unmatched>, <TestCaseFunction test_get_collections>, <TestCaseFunction test_get_indicators>, <TestCaseFunction test_get_reports>, <TestCaseFunction test_verify_connection>]
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> [<TestCaseFunction test_01a_core_get_boolean>, <TestCaseFunction test_01b_core_get_boolean_required>, <TestCaseFunction test_01c_core_get_boolean_default>, <TestCaseFunction test_02a_core_get_int>, <TestCaseFunction test_02b_core_get_int_required>, <TestCaseFunction test_02c_core_get_int_default>, <TestCaseFunction test_02d_core_get_int_verify_func_passed>, <TestCaseFunction test_02e_core_get_int_verify_func_failed>, <TestCaseFunction test_02f_core_get_int_bogus>, <TestCaseFunction test_02g_core_get_int_bogus_float>, <TestCaseFunction test_03a_core_get_string>, <TestCaseFunction test_03b_core_get_string_required>, <TestCaseFunction test_03c_core_get_string_default>, <TestCaseFunction test_03d_core_get_string_valid>, <TestCaseFunction test_03d_core_get_string_valid_not_listed>, <TestCaseFunction test_03e_core_get_string_valid_not_listed_with_unmatched_ok>, <TestCaseFunction test_03f_core_get_string_to_upper>, <TestCaseFunction test_03g_core_get_string_to_lower>, <TestCaseFunction test_03h_core_get_string_to_lower_and_to_upper>, <TestCaseFunction test_04a_config_minimal>, <TestCaseFunction test_04b_config_empty>, <TestCaseFunction test_05_cache_folder>, <TestCaseFunction test_06_debug>, <TestCaseFunction test_07_feed_retrieval_minutes_below_1>, <TestCaseFunction test_08_host_address>, <TestCaseFunction test_09_https_proxy>, <TestCaseFunction test_10_listener_address>, <TestCaseFunction test_11a_listener_port_below_minimum>, <TestCaseFunction test_11b_listener_port_above_maximum>, <TestCaseFunction test_12a_log_file_size>, <TestCaseFunction test_12b_log_file_size>, <TestCaseFunction test_13a_log_level>, <TestCaseFunction test_13b_log_level_unmatched>, <TestCaseFunction test_14_multi_core>, <TestCaseFunction test_15_pretty_print_json>, <TestCaseFunction test_16_carbonblack_server_url>, <TestCaseFunction test_17a_skip_cb_sync>, <TestCaseFunction test_17b_skip_cb_sync_true_no_token>, <TestCaseFunction test_18a_feed_save_mode>, <TestCaseFunction test_18b_save_mode_unmatched>, <TestCaseFunction test_get_collections>, <TestCaseFunction test_get_indicators>, <TestCaseFunction test_get_reports>, <TestCaseFunction test_verify_connection>] [hook]
    pytest_runtestloop [hook]
        session: <Session threatconnect-connector exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=44>
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_01a_core_get_boolean>
          nextitem: <TestCaseFunction test_01b_core_get_boolean_required>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_01a_core_get_boolean
            location: ('test/test_config.py', 24, 'TestConfig.test_01a_core_get_boolean')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_01a_core_get_boolean>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_01a_core_get_boolean>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_01a_core_get_boolean>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_01a_core_get_boolean' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_01a_core_get_boolean' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_01a_core_get_boolean' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_01a_core_get_boolean>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_01a_core_get_boolean>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_01a_core_get_boolean' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_01a_core_get_boolean' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_01a_core_get_boolean' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_01a_core_get_boolean>
            nextitem: <TestCaseFunction test_01b_core_get_boolean_required>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_01a_core_get_boolean>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_01a_core_get_boolean' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_01a_core_get_boolean' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_01a_core_get_boolean' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_01a_core_get_boolean
            location: ('test/test_config.py', 24, 'TestConfig.test_01a_core_get_boolean')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_01b_core_get_boolean_required>
          nextitem: <TestCaseFunction test_01c_core_get_boolean_default>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_01b_core_get_boolean_required
            location: ('test/test_config.py', 42, 'TestConfig.test_01b_core_get_boolean_required')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_01b_core_get_boolean_required>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_01b_core_get_boolean_required>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_01b_core_get_boolean_required' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_01b_core_get_boolean_required' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_01b_core_get_boolean_required' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_01b_core_get_boolean_required>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_01b_core_get_boolean_required>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_01b_core_get_boolean_required' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_01b_core_get_boolean_required' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_01b_core_get_boolean_required' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_01b_core_get_boolean_required>
            nextitem: <TestCaseFunction test_01c_core_get_boolean_default>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_01b_core_get_boolean_required>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_01b_core_get_boolean_required' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_01b_core_get_boolean_required' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_01b_core_get_boolean_required' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_01b_core_get_boolean_required
            location: ('test/test_config.py', 42, 'TestConfig.test_01b_core_get_boolean_required')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_01c_core_get_boolean_default>
          nextitem: <TestCaseFunction test_02a_core_get_int>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_01c_core_get_boolean_default
            location: ('test/test_config.py', 54, 'TestConfig.test_01c_core_get_boolean_default')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_01c_core_get_boolean_default>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_01c_core_get_boolean_default>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_01c_core_get_boolean_default' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_01c_core_get_boolean_default' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_01c_core_get_boolean_default' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_01c_core_get_boolean_default>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_01c_core_get_boolean_default>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_01c_core_get_boolean_default' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_01c_core_get_boolean_default' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_01c_core_get_boolean_default' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_01c_core_get_boolean_default>
            nextitem: <TestCaseFunction test_02a_core_get_int>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_01c_core_get_boolean_default>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_01c_core_get_boolean_default' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_01c_core_get_boolean_default' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_01c_core_get_boolean_default' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_01c_core_get_boolean_default
            location: ('test/test_config.py', 54, 'TestConfig.test_01c_core_get_boolean_default')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_02a_core_get_int>
          nextitem: <TestCaseFunction test_02b_core_get_int_required>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_02a_core_get_int
            location: ('test/test_config.py', 65, 'TestConfig.test_02a_core_get_int')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_02a_core_get_int>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_02a_core_get_int>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_02a_core_get_int' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_02a_core_get_int' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_02a_core_get_int' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_02a_core_get_int>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_02a_core_get_int>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_02a_core_get_int' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_02a_core_get_int' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_02a_core_get_int' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_02a_core_get_int>
            nextitem: <TestCaseFunction test_02b_core_get_int_required>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_02a_core_get_int>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_02a_core_get_int' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_02a_core_get_int' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_02a_core_get_int' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_02a_core_get_int
            location: ('test/test_config.py', 65, 'TestConfig.test_02a_core_get_int')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_02b_core_get_int_required>
          nextitem: <TestCaseFunction test_02c_core_get_int_default>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_02b_core_get_int_required
            location: ('test/test_config.py', 77, 'TestConfig.test_02b_core_get_int_required')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_02b_core_get_int_required>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_02b_core_get_int_required>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_02b_core_get_int_required' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_02b_core_get_int_required' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_02b_core_get_int_required' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_02b_core_get_int_required>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_02b_core_get_int_required>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_02b_core_get_int_required' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_02b_core_get_int_required' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_02b_core_get_int_required' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_02b_core_get_int_required>
            nextitem: <TestCaseFunction test_02c_core_get_int_default>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_02b_core_get_int_required>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_02b_core_get_int_required' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_02b_core_get_int_required' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_02b_core_get_int_required' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_02b_core_get_int_required
            location: ('test/test_config.py', 77, 'TestConfig.test_02b_core_get_int_required')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_02c_core_get_int_default>
          nextitem: <TestCaseFunction test_02d_core_get_int_verify_func_passed>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_02c_core_get_int_default
            location: ('test/test_config.py', 89, 'TestConfig.test_02c_core_get_int_default')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_02c_core_get_int_default>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_02c_core_get_int_default>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_02c_core_get_int_default' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_02c_core_get_int_default' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_02c_core_get_int_default' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_02c_core_get_int_default>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_02c_core_get_int_default>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_02c_core_get_int_default' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_02c_core_get_int_default' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_02c_core_get_int_default' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_02c_core_get_int_default>
            nextitem: <TestCaseFunction test_02d_core_get_int_verify_func_passed>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_02c_core_get_int_default>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_02c_core_get_int_default' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_02c_core_get_int_default' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_02c_core_get_int_default' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_02c_core_get_int_default
            location: ('test/test_config.py', 89, 'TestConfig.test_02c_core_get_int_default')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_02d_core_get_int_verify_func_passed>
          nextitem: <TestCaseFunction test_02e_core_get_int_verify_func_failed>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_02d_core_get_int_verify_func_passed
            location: ('test/test_config.py', 100, 'TestConfig.test_02d_core_get_int_verify_func_passed')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_02d_core_get_int_verify_func_passed>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_02d_core_get_int_verify_func_passed>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_02d_core_get_int_verify_func_passed' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_02d_core_get_int_verify_func_passed' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_02d_core_get_int_verify_func_passed' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_02d_core_get_int_verify_func_passed>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_02d_core_get_int_verify_func_passed>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_02d_core_get_int_verify_func_passed' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_02d_core_get_int_verify_func_passed' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_02d_core_get_int_verify_func_passed' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_02d_core_get_int_verify_func_passed>
            nextitem: <TestCaseFunction test_02e_core_get_int_verify_func_failed>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_02d_core_get_int_verify_func_passed>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_02d_core_get_int_verify_func_passed' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_02d_core_get_int_verify_func_passed' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_02d_core_get_int_verify_func_passed' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_02d_core_get_int_verify_func_passed
            location: ('test/test_config.py', 100, 'TestConfig.test_02d_core_get_int_verify_func_passed')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_02e_core_get_int_verify_func_failed>
          nextitem: <TestCaseFunction test_02f_core_get_int_bogus>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_02e_core_get_int_verify_func_failed
            location: ('test/test_config.py', 112, 'TestConfig.test_02e_core_get_int_verify_func_failed')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_02e_core_get_int_verify_func_failed>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_02e_core_get_int_verify_func_failed>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_02e_core_get_int_verify_func_failed' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_02e_core_get_int_verify_func_failed' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_02e_core_get_int_verify_func_failed' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_02e_core_get_int_verify_func_failed>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_02e_core_get_int_verify_func_failed>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_02e_core_get_int_verify_func_failed' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_02e_core_get_int_verify_func_failed' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_02e_core_get_int_verify_func_failed' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_02e_core_get_int_verify_func_failed>
            nextitem: <TestCaseFunction test_02f_core_get_int_bogus>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_02e_core_get_int_verify_func_failed>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_02e_core_get_int_verify_func_failed' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_02e_core_get_int_verify_func_failed' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_02e_core_get_int_verify_func_failed' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_02e_core_get_int_verify_func_failed
            location: ('test/test_config.py', 112, 'TestConfig.test_02e_core_get_int_verify_func_failed')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_02f_core_get_int_bogus>
          nextitem: <TestCaseFunction test_02g_core_get_int_bogus_float>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_02f_core_get_int_bogus
            location: ('test/test_config.py', 126, 'TestConfig.test_02f_core_get_int_bogus')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_02f_core_get_int_bogus>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_02f_core_get_int_bogus>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_02f_core_get_int_bogus' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_02f_core_get_int_bogus' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_02f_core_get_int_bogus' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_02f_core_get_int_bogus>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_02f_core_get_int_bogus>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_02f_core_get_int_bogus' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_02f_core_get_int_bogus' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_02f_core_get_int_bogus' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_02f_core_get_int_bogus>
            nextitem: <TestCaseFunction test_02g_core_get_int_bogus_float>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_02f_core_get_int_bogus>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_02f_core_get_int_bogus' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_02f_core_get_int_bogus' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_02f_core_get_int_bogus' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_02f_core_get_int_bogus
            location: ('test/test_config.py', 126, 'TestConfig.test_02f_core_get_int_bogus')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_02g_core_get_int_bogus_float>
          nextitem: <TestCaseFunction test_03a_core_get_string>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_02g_core_get_int_bogus_float
            location: ('test/test_config.py', 139, 'TestConfig.test_02g_core_get_int_bogus_float')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_02g_core_get_int_bogus_float>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_02g_core_get_int_bogus_float>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_02g_core_get_int_bogus_float' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_02g_core_get_int_bogus_float' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_02g_core_get_int_bogus_float' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_02g_core_get_int_bogus_float>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_02g_core_get_int_bogus_float>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_02g_core_get_int_bogus_float' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_02g_core_get_int_bogus_float' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_02g_core_get_int_bogus_float' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_02g_core_get_int_bogus_float>
            nextitem: <TestCaseFunction test_03a_core_get_string>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_02g_core_get_int_bogus_float>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_02g_core_get_int_bogus_float' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_02g_core_get_int_bogus_float' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_02g_core_get_int_bogus_float' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_02g_core_get_int_bogus_float
            location: ('test/test_config.py', 139, 'TestConfig.test_02g_core_get_int_bogus_float')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_03a_core_get_string>
          nextitem: <TestCaseFunction test_03b_core_get_string_required>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_03a_core_get_string
            location: ('test/test_config.py', 152, 'TestConfig.test_03a_core_get_string')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_03a_core_get_string>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03a_core_get_string>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03a_core_get_string' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03a_core_get_string' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03a_core_get_string' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_03a_core_get_string>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03a_core_get_string>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03a_core_get_string' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03a_core_get_string' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03a_core_get_string' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_03a_core_get_string>
            nextitem: <TestCaseFunction test_03b_core_get_string_required>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03a_core_get_string>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03a_core_get_string' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03a_core_get_string' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03a_core_get_string' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_03a_core_get_string
            location: ('test/test_config.py', 152, 'TestConfig.test_03a_core_get_string')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_03b_core_get_string_required>
          nextitem: <TestCaseFunction test_03c_core_get_string_default>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_03b_core_get_string_required
            location: ('test/test_config.py', 164, 'TestConfig.test_03b_core_get_string_required')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_03b_core_get_string_required>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03b_core_get_string_required>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03b_core_get_string_required' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03b_core_get_string_required' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03b_core_get_string_required' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_03b_core_get_string_required>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03b_core_get_string_required>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03b_core_get_string_required' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03b_core_get_string_required' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03b_core_get_string_required' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_03b_core_get_string_required>
            nextitem: <TestCaseFunction test_03c_core_get_string_default>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03b_core_get_string_required>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03b_core_get_string_required' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03b_core_get_string_required' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03b_core_get_string_required' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_03b_core_get_string_required
            location: ('test/test_config.py', 164, 'TestConfig.test_03b_core_get_string_required')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_03c_core_get_string_default>
          nextitem: <TestCaseFunction test_03d_core_get_string_valid>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_03c_core_get_string_default
            location: ('test/test_config.py', 176, 'TestConfig.test_03c_core_get_string_default')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_03c_core_get_string_default>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03c_core_get_string_default>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03c_core_get_string_default' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03c_core_get_string_default' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03c_core_get_string_default' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_03c_core_get_string_default>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03c_core_get_string_default>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03c_core_get_string_default' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03c_core_get_string_default' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03c_core_get_string_default' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_03c_core_get_string_default>
            nextitem: <TestCaseFunction test_03d_core_get_string_valid>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03c_core_get_string_default>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03c_core_get_string_default' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03c_core_get_string_default' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03c_core_get_string_default' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_03c_core_get_string_default
            location: ('test/test_config.py', 176, 'TestConfig.test_03c_core_get_string_default')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_03d_core_get_string_valid>
          nextitem: <TestCaseFunction test_03d_core_get_string_valid_not_listed>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_03d_core_get_string_valid
            location: ('test/test_config.py', 187, 'TestConfig.test_03d_core_get_string_valid')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_03d_core_get_string_valid>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03d_core_get_string_valid>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03d_core_get_string_valid' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03d_core_get_string_valid' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03d_core_get_string_valid' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_03d_core_get_string_valid>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03d_core_get_string_valid>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03d_core_get_string_valid' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03d_core_get_string_valid' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03d_core_get_string_valid' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_03d_core_get_string_valid>
            nextitem: <TestCaseFunction test_03d_core_get_string_valid_not_listed>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03d_core_get_string_valid>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03d_core_get_string_valid' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03d_core_get_string_valid' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03d_core_get_string_valid' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_03d_core_get_string_valid
            location: ('test/test_config.py', 187, 'TestConfig.test_03d_core_get_string_valid')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_03d_core_get_string_valid_not_listed>
          nextitem: <TestCaseFunction test_03e_core_get_string_valid_not_listed_with_unmatched_ok>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_03d_core_get_string_valid_not_listed
            location: ('test/test_config.py', 199, 'TestConfig.test_03d_core_get_string_valid_not_listed')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_03d_core_get_string_valid_not_listed>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03d_core_get_string_valid_not_listed>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03d_core_get_string_valid_not_listed' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03d_core_get_string_valid_not_listed' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03d_core_get_string_valid_not_listed' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_03d_core_get_string_valid_not_listed>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03d_core_get_string_valid_not_listed>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03d_core_get_string_valid_not_listed' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03d_core_get_string_valid_not_listed' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03d_core_get_string_valid_not_listed' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_03d_core_get_string_valid_not_listed>
            nextitem: <TestCaseFunction test_03e_core_get_string_valid_not_listed_with_unmatched_ok>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03d_core_get_string_valid_not_listed>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03d_core_get_string_valid_not_listed' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03d_core_get_string_valid_not_listed' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03d_core_get_string_valid_not_listed' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_03d_core_get_string_valid_not_listed
            location: ('test/test_config.py', 199, 'TestConfig.test_03d_core_get_string_valid_not_listed')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_03e_core_get_string_valid_not_listed_with_unmatched_ok>
          nextitem: <TestCaseFunction test_03f_core_get_string_to_upper>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_03e_core_get_string_valid_not_listed_with_unmatched_ok
            location: ('test/test_config.py', 212, 'TestConfig.test_03e_core_get_string_valid_not_listed_with_unmatched_ok')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_03e_core_get_string_valid_not_listed_with_unmatched_ok>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03e_core_get_string_valid_not_listed_with_unmatched_ok>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03e_core_get_string_valid_not_listed_with_unmatched_ok' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03e_core_get_string_valid_not_listed_with_unmatched_ok' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03e_core_get_string_valid_not_listed_with_unmatched_ok' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_03e_core_get_string_valid_not_listed_with_unmatched_ok>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03e_core_get_string_valid_not_listed_with_unmatched_ok>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03e_core_get_string_valid_not_listed_with_unmatched_ok' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03e_core_get_string_valid_not_listed_with_unmatched_ok' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03e_core_get_string_valid_not_listed_with_unmatched_ok' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_03e_core_get_string_valid_not_listed_with_unmatched_ok>
            nextitem: <TestCaseFunction test_03f_core_get_string_to_upper>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03e_core_get_string_valid_not_listed_with_unmatched_ok>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03e_core_get_string_valid_not_listed_with_unmatched_ok' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03e_core_get_string_valid_not_listed_with_unmatched_ok' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03e_core_get_string_valid_not_listed_with_unmatched_ok' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_03e_core_get_string_valid_not_listed_with_unmatched_ok
            location: ('test/test_config.py', 212, 'TestConfig.test_03e_core_get_string_valid_not_listed_with_unmatched_ok')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_03f_core_get_string_to_upper>
          nextitem: <TestCaseFunction test_03g_core_get_string_to_lower>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_03f_core_get_string_to_upper
            location: ('test/test_config.py', 225, 'TestConfig.test_03f_core_get_string_to_upper')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_03f_core_get_string_to_upper>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03f_core_get_string_to_upper>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03f_core_get_string_to_upper' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03f_core_get_string_to_upper' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03f_core_get_string_to_upper' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_03f_core_get_string_to_upper>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03f_core_get_string_to_upper>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03f_core_get_string_to_upper' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03f_core_get_string_to_upper' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03f_core_get_string_to_upper' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_03f_core_get_string_to_upper>
            nextitem: <TestCaseFunction test_03g_core_get_string_to_lower>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03f_core_get_string_to_upper>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03f_core_get_string_to_upper' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03f_core_get_string_to_upper' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03f_core_get_string_to_upper' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_03f_core_get_string_to_upper
            location: ('test/test_config.py', 225, 'TestConfig.test_03f_core_get_string_to_upper')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_03g_core_get_string_to_lower>
          nextitem: <TestCaseFunction test_03h_core_get_string_to_lower_and_to_upper>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_03g_core_get_string_to_lower
            location: ('test/test_config.py', 237, 'TestConfig.test_03g_core_get_string_to_lower')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_03g_core_get_string_to_lower>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03g_core_get_string_to_lower>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03g_core_get_string_to_lower' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03g_core_get_string_to_lower' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03g_core_get_string_to_lower' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_03g_core_get_string_to_lower>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03g_core_get_string_to_lower>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03g_core_get_string_to_lower' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03g_core_get_string_to_lower' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03g_core_get_string_to_lower' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_03g_core_get_string_to_lower>
            nextitem: <TestCaseFunction test_03h_core_get_string_to_lower_and_to_upper>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03g_core_get_string_to_lower>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03g_core_get_string_to_lower' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03g_core_get_string_to_lower' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03g_core_get_string_to_lower' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_03g_core_get_string_to_lower
            location: ('test/test_config.py', 237, 'TestConfig.test_03g_core_get_string_to_lower')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_03h_core_get_string_to_lower_and_to_upper>
          nextitem: <TestCaseFunction test_04a_config_minimal>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_03h_core_get_string_to_lower_and_to_upper
            location: ('test/test_config.py', 249, 'TestConfig.test_03h_core_get_string_to_lower_and_to_upper')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_03h_core_get_string_to_lower_and_to_upper>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03h_core_get_string_to_lower_and_to_upper>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03h_core_get_string_to_lower_and_to_upper' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03h_core_get_string_to_lower_and_to_upper' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03h_core_get_string_to_lower_and_to_upper' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_03h_core_get_string_to_lower_and_to_upper>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03h_core_get_string_to_lower_and_to_upper>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03h_core_get_string_to_lower_and_to_upper' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03h_core_get_string_to_lower_and_to_upper' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03h_core_get_string_to_lower_and_to_upper' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_03h_core_get_string_to_lower_and_to_upper>
            nextitem: <TestCaseFunction test_04a_config_minimal>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_03h_core_get_string_to_lower_and_to_upper>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_03h_core_get_string_to_lower_and_to_upper' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_03h_core_get_string_to_lower_and_to_upper' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_03h_core_get_string_to_lower_and_to_upper' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_03h_core_get_string_to_lower_and_to_upper
            location: ('test/test_config.py', 249, 'TestConfig.test_03h_core_get_string_to_lower_and_to_upper')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_04a_config_minimal>
          nextitem: <TestCaseFunction test_04b_config_empty>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_04a_config_minimal
            location: ('test/test_config.py', 264, 'TestConfig.test_04a_config_minimal')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_04a_config_minimal>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_04a_config_minimal>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_04a_config_minimal' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_04a_config_minimal' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_04a_config_minimal' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_04a_config_minimal>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_04a_config_minimal>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_04a_config_minimal' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_04a_config_minimal' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_04a_config_minimal' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_04a_config_minimal>
            nextitem: <TestCaseFunction test_04b_config_empty>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_04a_config_minimal>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_04a_config_minimal' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_04a_config_minimal' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_04a_config_minimal' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_04a_config_minimal
            location: ('test/test_config.py', 264, 'TestConfig.test_04a_config_minimal')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_04b_config_empty>
          nextitem: <TestCaseFunction test_05_cache_folder>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_04b_config_empty
            location: ('test/test_config.py', 310, 'TestConfig.test_04b_config_empty')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_04b_config_empty>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_04b_config_empty>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_04b_config_empty' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_04b_config_empty' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_04b_config_empty' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_04b_config_empty>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_04b_config_empty>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_04b_config_empty' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_04b_config_empty' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_04b_config_empty' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_04b_config_empty>
            nextitem: <TestCaseFunction test_05_cache_folder>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_04b_config_empty>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_04b_config_empty' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_04b_config_empty' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_04b_config_empty' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_04b_config_empty
            location: ('test/test_config.py', 310, 'TestConfig.test_04b_config_empty')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_05_cache_folder>
          nextitem: <TestCaseFunction test_06_debug>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_05_cache_folder
            location: ('test/test_config.py', 318, 'TestConfig.test_05_cache_folder')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_05_cache_folder>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_05_cache_folder>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_05_cache_folder' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_05_cache_folder' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_05_cache_folder' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_05_cache_folder>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_05_cache_folder>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_05_cache_folder' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_05_cache_folder' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_05_cache_folder' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_05_cache_folder>
            nextitem: <TestCaseFunction test_06_debug>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_05_cache_folder>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_05_cache_folder' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_05_cache_folder' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_05_cache_folder' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_05_cache_folder
            location: ('test/test_config.py', 318, 'TestConfig.test_05_cache_folder')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_06_debug>
          nextitem: <TestCaseFunction test_07_feed_retrieval_minutes_below_1>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_06_debug
            location: ('test/test_config.py', 328, 'TestConfig.test_06_debug')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_06_debug>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_06_debug>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_06_debug' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_06_debug' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_06_debug' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_06_debug>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_06_debug>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_06_debug' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_06_debug' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_06_debug' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_06_debug>
            nextitem: <TestCaseFunction test_07_feed_retrieval_minutes_below_1>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_06_debug>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_06_debug' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_06_debug' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_06_debug' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_06_debug
            location: ('test/test_config.py', 328, 'TestConfig.test_06_debug')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_07_feed_retrieval_minutes_below_1>
          nextitem: <TestCaseFunction test_08_host_address>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_07_feed_retrieval_minutes_below_1
            location: ('test/test_config.py', 340, 'TestConfig.test_07_feed_retrieval_minutes_below_1')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_07_feed_retrieval_minutes_below_1>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_07_feed_retrieval_minutes_below_1>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_07_feed_retrieval_minutes_below_1' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_07_feed_retrieval_minutes_below_1' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_07_feed_retrieval_minutes_below_1' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_07_feed_retrieval_minutes_below_1>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_07_feed_retrieval_minutes_below_1>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_07_feed_retrieval_minutes_below_1' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_07_feed_retrieval_minutes_below_1' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_07_feed_retrieval_minutes_below_1' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_07_feed_retrieval_minutes_below_1>
            nextitem: <TestCaseFunction test_08_host_address>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_07_feed_retrieval_minutes_below_1>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_07_feed_retrieval_minutes_below_1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_07_feed_retrieval_minutes_below_1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_07_feed_retrieval_minutes_below_1' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_07_feed_retrieval_minutes_below_1
            location: ('test/test_config.py', 340, 'TestConfig.test_07_feed_retrieval_minutes_below_1')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_08_host_address>
          nextitem: <TestCaseFunction test_09_https_proxy>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_08_host_address
            location: ('test/test_config.py', 350, 'TestConfig.test_08_host_address')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_08_host_address>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_08_host_address>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_08_host_address' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_08_host_address' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_08_host_address' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_08_host_address>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_08_host_address>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_08_host_address' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_08_host_address' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_08_host_address' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_08_host_address>
            nextitem: <TestCaseFunction test_09_https_proxy>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_08_host_address>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_08_host_address' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_08_host_address' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_08_host_address' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_08_host_address
            location: ('test/test_config.py', 350, 'TestConfig.test_08_host_address')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_09_https_proxy>
          nextitem: <TestCaseFunction test_10_listener_address>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_09_https_proxy
            location: ('test/test_config.py', 360, 'TestConfig.test_09_https_proxy')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_09_https_proxy>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_09_https_proxy>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_09_https_proxy' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_09_https_proxy' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_09_https_proxy' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_09_https_proxy>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_09_https_proxy>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_09_https_proxy' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_09_https_proxy' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_09_https_proxy' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_09_https_proxy>
            nextitem: <TestCaseFunction test_10_listener_address>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_09_https_proxy>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_09_https_proxy' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_09_https_proxy' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_09_https_proxy' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_09_https_proxy
            location: ('test/test_config.py', 360, 'TestConfig.test_09_https_proxy')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_10_listener_address>
          nextitem: <TestCaseFunction test_11a_listener_port_below_minimum>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_10_listener_address
            location: ('test/test_config.py', 370, 'TestConfig.test_10_listener_address')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_10_listener_address>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_10_listener_address>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_10_listener_address' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_10_listener_address' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_10_listener_address' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_10_listener_address>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_10_listener_address>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_10_listener_address' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_10_listener_address' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_10_listener_address' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_10_listener_address>
            nextitem: <TestCaseFunction test_11a_listener_port_below_minimum>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_10_listener_address>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_10_listener_address' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_10_listener_address' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_10_listener_address' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_10_listener_address
            location: ('test/test_config.py', 370, 'TestConfig.test_10_listener_address')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_11a_listener_port_below_minimum>
          nextitem: <TestCaseFunction test_11b_listener_port_above_maximum>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_11a_listener_port_below_minimum
            location: ('test/test_config.py', 382, 'TestConfig.test_11a_listener_port_below_minimum')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_11a_listener_port_below_minimum>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_11a_listener_port_below_minimum>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_11a_listener_port_below_minimum' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_11a_listener_port_below_minimum' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_11a_listener_port_below_minimum' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_11a_listener_port_below_minimum>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_11a_listener_port_below_minimum>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_11a_listener_port_below_minimum' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_11a_listener_port_below_minimum' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_11a_listener_port_below_minimum' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_11a_listener_port_below_minimum>
            nextitem: <TestCaseFunction test_11b_listener_port_above_maximum>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_11a_listener_port_below_minimum>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_11a_listener_port_below_minimum' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_11a_listener_port_below_minimum' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_11a_listener_port_below_minimum' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_11a_listener_port_below_minimum
            location: ('test/test_config.py', 382, 'TestConfig.test_11a_listener_port_below_minimum')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_11b_listener_port_above_maximum>
          nextitem: <TestCaseFunction test_12a_log_file_size>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_11b_listener_port_above_maximum
            location: ('test/test_config.py', 392, 'TestConfig.test_11b_listener_port_above_maximum')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_11b_listener_port_above_maximum>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_11b_listener_port_above_maximum>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_11b_listener_port_above_maximum' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_11b_listener_port_above_maximum' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_11b_listener_port_above_maximum' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_11b_listener_port_above_maximum>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_11b_listener_port_above_maximum>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_11b_listener_port_above_maximum' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_11b_listener_port_above_maximum' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_11b_listener_port_above_maximum' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_11b_listener_port_above_maximum>
            nextitem: <TestCaseFunction test_12a_log_file_size>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_11b_listener_port_above_maximum>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_11b_listener_port_above_maximum' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_11b_listener_port_above_maximum' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_11b_listener_port_above_maximum' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_11b_listener_port_above_maximum
            location: ('test/test_config.py', 392, 'TestConfig.test_11b_listener_port_above_maximum')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_12a_log_file_size>
          nextitem: <TestCaseFunction test_12b_log_file_size>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_12a_log_file_size
            location: ('test/test_config.py', 402, 'TestConfig.test_12a_log_file_size')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_12a_log_file_size>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_12a_log_file_size>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_12a_log_file_size' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_12a_log_file_size' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_12a_log_file_size' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_12a_log_file_size>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_12a_log_file_size>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_12a_log_file_size' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_12a_log_file_size' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_12a_log_file_size' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_12a_log_file_size>
            nextitem: <TestCaseFunction test_12b_log_file_size>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_12a_log_file_size>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_12a_log_file_size' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_12a_log_file_size' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_12a_log_file_size' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_12a_log_file_size
            location: ('test/test_config.py', 402, 'TestConfig.test_12a_log_file_size')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_12b_log_file_size>
          nextitem: <TestCaseFunction test_13a_log_level>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_12b_log_file_size
            location: ('test/test_config.py', 412, 'TestConfig.test_12b_log_file_size')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_12b_log_file_size>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_12b_log_file_size>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_12b_log_file_size' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_12b_log_file_size' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_12b_log_file_size' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_12b_log_file_size>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_12b_log_file_size>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_12b_log_file_size' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_12b_log_file_size' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_12b_log_file_size' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_12b_log_file_size>
            nextitem: <TestCaseFunction test_13a_log_level>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_12b_log_file_size>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_12b_log_file_size' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_12b_log_file_size' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_12b_log_file_size' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_12b_log_file_size
            location: ('test/test_config.py', 412, 'TestConfig.test_12b_log_file_size')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_13a_log_level>
          nextitem: <TestCaseFunction test_13b_log_level_unmatched>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_13a_log_level
            location: ('test/test_config.py', 422, 'TestConfig.test_13a_log_level')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_13a_log_level>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_13a_log_level>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_13a_log_level' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_13a_log_level' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_13a_log_level' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_13a_log_level>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_13a_log_level>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_13a_log_level' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_13a_log_level' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_13a_log_level' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_13a_log_level>
            nextitem: <TestCaseFunction test_13b_log_level_unmatched>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_13a_log_level>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_13a_log_level' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_13a_log_level' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_13a_log_level' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_13a_log_level
            location: ('test/test_config.py', 422, 'TestConfig.test_13a_log_level')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_13b_log_level_unmatched>
          nextitem: <TestCaseFunction test_14_multi_core>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_13b_log_level_unmatched
            location: ('test/test_config.py', 432, 'TestConfig.test_13b_log_level_unmatched')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_13b_log_level_unmatched>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_13b_log_level_unmatched>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_13b_log_level_unmatched' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_13b_log_level_unmatched' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_13b_log_level_unmatched' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_13b_log_level_unmatched>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_13b_log_level_unmatched>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_13b_log_level_unmatched' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_13b_log_level_unmatched' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_13b_log_level_unmatched' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_13b_log_level_unmatched>
            nextitem: <TestCaseFunction test_14_multi_core>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_13b_log_level_unmatched>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_13b_log_level_unmatched' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_13b_log_level_unmatched' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_13b_log_level_unmatched' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_13b_log_level_unmatched
            location: ('test/test_config.py', 432, 'TestConfig.test_13b_log_level_unmatched')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_14_multi_core>
          nextitem: <TestCaseFunction test_15_pretty_print_json>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_14_multi_core
            location: ('test/test_config.py', 442, 'TestConfig.test_14_multi_core')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_14_multi_core>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_14_multi_core>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_14_multi_core' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_14_multi_core' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_14_multi_core' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_14_multi_core>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_14_multi_core>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_14_multi_core' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_14_multi_core' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_14_multi_core' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_14_multi_core>
            nextitem: <TestCaseFunction test_15_pretty_print_json>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_14_multi_core>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_14_multi_core' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_14_multi_core' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_14_multi_core' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_14_multi_core
            location: ('test/test_config.py', 442, 'TestConfig.test_14_multi_core')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_15_pretty_print_json>
          nextitem: <TestCaseFunction test_16_carbonblack_server_url>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_15_pretty_print_json
            location: ('test/test_config.py', 452, 'TestConfig.test_15_pretty_print_json')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_15_pretty_print_json>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_15_pretty_print_json>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_15_pretty_print_json' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_15_pretty_print_json' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_15_pretty_print_json' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_15_pretty_print_json>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_15_pretty_print_json>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_15_pretty_print_json' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_15_pretty_print_json' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_15_pretty_print_json' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_15_pretty_print_json>
            nextitem: <TestCaseFunction test_16_carbonblack_server_url>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_15_pretty_print_json>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_15_pretty_print_json' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_15_pretty_print_json' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_15_pretty_print_json' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_15_pretty_print_json
            location: ('test/test_config.py', 452, 'TestConfig.test_15_pretty_print_json')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_16_carbonblack_server_url>
          nextitem: <TestCaseFunction test_17a_skip_cb_sync>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_16_carbonblack_server_url
            location: ('test/test_config.py', 464, 'TestConfig.test_16_carbonblack_server_url')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_16_carbonblack_server_url>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_16_carbonblack_server_url>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_16_carbonblack_server_url' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_16_carbonblack_server_url' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_16_carbonblack_server_url' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_16_carbonblack_server_url>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_16_carbonblack_server_url>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_16_carbonblack_server_url' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_16_carbonblack_server_url' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_16_carbonblack_server_url' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_16_carbonblack_server_url>
            nextitem: <TestCaseFunction test_17a_skip_cb_sync>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_16_carbonblack_server_url>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_16_carbonblack_server_url' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_16_carbonblack_server_url' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_16_carbonblack_server_url' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_16_carbonblack_server_url
            location: ('test/test_config.py', 464, 'TestConfig.test_16_carbonblack_server_url')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_17a_skip_cb_sync>
          nextitem: <TestCaseFunction test_17b_skip_cb_sync_true_no_token>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_17a_skip_cb_sync
            location: ('test/test_config.py', 474, 'TestConfig.test_17a_skip_cb_sync')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_17a_skip_cb_sync>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_17a_skip_cb_sync>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_17a_skip_cb_sync' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_17a_skip_cb_sync' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_17a_skip_cb_sync' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_17a_skip_cb_sync>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_17a_skip_cb_sync>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_17a_skip_cb_sync' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_17a_skip_cb_sync' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_17a_skip_cb_sync' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_17a_skip_cb_sync>
            nextitem: <TestCaseFunction test_17b_skip_cb_sync_true_no_token>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_17a_skip_cb_sync>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_17a_skip_cb_sync' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_17a_skip_cb_sync' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_17a_skip_cb_sync' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_17a_skip_cb_sync
            location: ('test/test_config.py', 474, 'TestConfig.test_17a_skip_cb_sync')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_17b_skip_cb_sync_true_no_token>
          nextitem: <TestCaseFunction test_18a_feed_save_mode>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_17b_skip_cb_sync_true_no_token
            location: ('test/test_config.py', 484, 'TestConfig.test_17b_skip_cb_sync_true_no_token')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_17b_skip_cb_sync_true_no_token>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_17b_skip_cb_sync_true_no_token>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_17b_skip_cb_sync_true_no_token' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_17b_skip_cb_sync_true_no_token' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_17b_skip_cb_sync_true_no_token' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_17b_skip_cb_sync_true_no_token>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_17b_skip_cb_sync_true_no_token>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_17b_skip_cb_sync_true_no_token' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_17b_skip_cb_sync_true_no_token' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_17b_skip_cb_sync_true_no_token' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_17b_skip_cb_sync_true_no_token>
            nextitem: <TestCaseFunction test_18a_feed_save_mode>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_17b_skip_cb_sync_true_no_token>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_17b_skip_cb_sync_true_no_token' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_17b_skip_cb_sync_true_no_token' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_17b_skip_cb_sync_true_no_token' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_17b_skip_cb_sync_true_no_token
            location: ('test/test_config.py', 484, 'TestConfig.test_17b_skip_cb_sync_true_no_token')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_18a_feed_save_mode>
          nextitem: <TestCaseFunction test_18b_save_mode_unmatched>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_18a_feed_save_mode
            location: ('test/test_config.py', 495, 'TestConfig.test_18a_feed_save_mode')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_18a_feed_save_mode>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_18a_feed_save_mode>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_18a_feed_save_mode' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_18a_feed_save_mode' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_18a_feed_save_mode' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_18a_feed_save_mode>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_18a_feed_save_mode>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_18a_feed_save_mode' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_18a_feed_save_mode' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_18a_feed_save_mode' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_18a_feed_save_mode>
            nextitem: <TestCaseFunction test_18b_save_mode_unmatched>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_18a_feed_save_mode>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_18a_feed_save_mode' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_18a_feed_save_mode' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_18a_feed_save_mode' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_18a_feed_save_mode
            location: ('test/test_config.py', 495, 'TestConfig.test_18a_feed_save_mode')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_18b_save_mode_unmatched>
          nextitem: <TestCaseFunction test_get_collections>
        pytest_runtest_logstart [hook]
            nodeid: test/test_config.py::TestConfig::test_18b_save_mode_unmatched
            location: ('test/test_config.py', 505, 'TestConfig.test_18b_save_mode_unmatched')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_18b_save_mode_unmatched>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_18b_save_mode_unmatched>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_18b_save_mode_unmatched' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_18b_save_mode_unmatched' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_18b_save_mode_unmatched' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_18b_save_mode_unmatched>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_18b_save_mode_unmatched>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_18b_save_mode_unmatched' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_18b_save_mode_unmatched' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_18b_save_mode_unmatched' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_18b_save_mode_unmatched>
            nextitem: <TestCaseFunction test_get_collections>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_18b_save_mode_unmatched>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_18a_feed_save_mode>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_17b_skip_cb_sync_true_no_token>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_17a_skip_cb_sync>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_16_carbonblack_server_url>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_15_pretty_print_json>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_14_multi_core>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_13b_log_level_unmatched>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_13a_log_level>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_12b_log_file_size>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_12a_log_file_size>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_11b_listener_port_above_maximum>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_11a_listener_port_below_minimum>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_10_listener_address>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_09_https_proxy>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_08_host_address>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_07_feed_retrieval_minutes_below_1>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_06_debug>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_05_cache_folder>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_04b_config_empty>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_04a_config_minimal>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_03h_core_get_string_to_lower_and_to_upper>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_03g_core_get_string_to_lower>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_03f_core_get_string_to_upper>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_03e_core_get_string_valid_not_listed_with_unmatched_ok>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_03d_core_get_string_valid_not_listed>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_03d_core_get_string_valid>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_03c_core_get_string_default>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_03b_core_get_string_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_03a_core_get_string>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_02g_core_get_int_bogus_float>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_02f_core_get_int_bogus>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_02e_core_get_int_verify_func_failed>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_02d_core_get_int_verify_func_passed>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_02c_core_get_int_default>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_02b_core_get_int_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_02a_core_get_int>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_01c_core_get_boolean_default>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_01b_core_get_boolean_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_config.py::TestConfig'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_01a_core_get_boolean>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_18b_save_mode_unmatched>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/test_config.py::TestConfig::test_18b_save_mode_unmatched' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/test_config.py::TestConfig::test_18b_save_mode_unmatched' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/test_config.py::TestConfig::test_18b_save_mode_unmatched' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f3e54806370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/test_config.py::TestConfig::test_18b_save_mode_unmatched
            location: ('test/test_config.py', 505, 'TestConfig.test_18b_save_mode_unmatched')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_get_collections>
          nextitem: <TestCaseFunction test_get_indicators>
        pytest_runtest_logstart [hook]
            nodeid: test/test_driver.py::_TestDriverMockedServer::test_get_collections
            location: ('test/test_driver.py', 23, '_TestDriverMockedServer.test_get_collections')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_get_collections>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_driver.py::_TestDriverMockedServer'>
              request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_get_collections>>
          early skip of rewriting module: medallion.backends [assertion]
          early skip of rewriting module: medallion.backends.memory_backend [assertion]
          early skip of rewriting module: medallion.common [assertion]
          early skip of rewriting module: medallion.filters [assertion]
          early skip of rewriting module: medallion.filters.basic_filter [assertion]
          early skip of rewriting module: medallion.backends.base [assertion]
    pytest_keyboard_interrupt [hook]
        excinfo: <ExceptionInfo KeyboardInterrupt() tblen=62>
    finish pytest_keyboard_interrupt --> [] [hook]
    pytest_sessionfinish [hook]
        session: <Session threatconnect-connector exitstatus=<ExitCode.INTERRUPTED: 2> testsfailed=0 testscollected=44>
        exitstatus: ExitCode.INTERRUPTED
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='_UnitTestCase__pytest_class_setup' scope='class' baseid='test/test_driver.py::_TestDriverMockedServer'>
          request: <SubRequest '_UnitTestCase__pytest_class_setup' for <TestCaseFunction test_get_collections>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x7f3e50c28e20>
          exitstatus: ExitCode.INTERRUPTED
          config: <_pytest.config.Config object at 0x7f3e54806370>
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x7f3e54806370>
    finish pytest_unconfigure --> [] [hook]
